{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red33\green255\blue6;\red24\green24\blue24;\red255\green255\blue255;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c97680\c0;\cssrgb\c12157\c12157\c12157;\cssrgb\c100000\c100000\c100000;
\csgray\c0\c0;}
\margl1440\margr1440\vieww28600\viewh12800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 \
- You are given an \cb2 Attribute Utility Tree\cb1  that \cb2 points out the Architecturally Significant Requirements (ASRs)\cb1  \
- You are also given several \cb2 Quality Attribute Scenarios\cb1  to evaluate the architecture of the app.\
- Reference the ATAM Process and Quality Attribute Scenarios\
- Will the end users of our system want to keep using it?\
- Will it be easy and affordable to continue to develop the system?\
\
X 1. Identify the risks\
\
X 2. For each Quality Attribute Scenario provided, identify if it is a \
	- risk, \
	- non-risk, \
	- tradeoff, or \
	- sensitivity point \
  and give a brief explanation (3 sentences or less) for each\
\
3. update the Utility Tree to reflect the Scenarios\
4. Make 4-5 changes, including adding a Quality Attribute and adding more Attribute Refinements and ASRs to reflect the risks\
5. You may also update the current ASRs to reflect the Scenarios or (if justified in the evaluation) change their priorities.\
6. Once you have finished your evaluation, use the Quality Attribute Scenarios to create an updated Utility Tree that considers the Quality Attribute Scenarios based on the primary ASRs from the previous Utility Tree.\
7. 
\f1\fs32 \cf3 \cb4 \expnd0\expndtw0\kerning0
Upload a PDF of your utility tree diagram and explanations\
\
\
Quality Attributes\
\
	- Developer\'92s perspective: \
		maintainability\
		reusability\
		flexibility\
		modifiability\
		testability\
		conceptual integrity\
\
	- User\'92s perspective: \
		availability\
		interoperability\
		security\
		performance\
		usability
\f0\fs36 \cf0 \cb2 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb5 \
Quality Attribute Scenarios\
	\
	- The scenarios are a technique used to measure Quality Attributes.\
	- There are a number of methods that can be used to implement scenarios in analysis and evaluation of the entire architecture\
\
Architecture Trade-off Analysis Method (ATAM)\
\
	There are three different groups of participants in ATAM:\
		- evaluation team:\
			- Designers\
			- Peers\
			- Outsiders\
		- Project Decision Makers\
		- Architecture stakeholders \
	\
	Step 5 - Create a quality attribute tree\
		The tree maps the quality-related architecturally significant requirements (ASR)s for each quality attribute.\
	\cb2 \
\cb5 \
\
\
\
No doubt the most relevant concepts I\'92ve learned in the Software Architecture course were Quality Attributes, Quality Attributes Scenarios and ATAM:\
\
1. Quality Attributes are so relevant in a software development process, since they aims to ensure that the system being developed meets the needs and expectations of its users and stakeholders.\
\
2. Quality Attributes Scenarios are detailed descriptions of how a system should perform under specific conditions, essential to evaluate the design and help to measure the Quality Attributes, in order to determine if it addresses the concerns, or the requirements, of all stakeholders. They are also helpful to identify potential issues, prioritize and focus development efforts. \
\
3. ATAM helps developers identify potential risks and evaluate the impact of architectural decisions on the system's requirements. Also allows developers to evaluate and compare the trade-offs between different architectural design choices.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb2 \
\
\
\
}